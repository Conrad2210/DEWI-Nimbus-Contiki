'use strict';
/*
 * Contains a controller to do the user login
 */
angular.module('app.controllers').controller('IndexController', ['$scope', '$location', 'cDB', 'CoreHubService', 'LoginService', 'AccountService', 'BoothService','BeaconService','BroadcastService', 'ProfileService', 'StoreService', 'CategoryService', 'PaginationService','NewsFeedService',
function ($scope, $location, cDB, CoreHubService, LoginService, AccountService,BoothService,BeaconService,BroadcastService, ProfileService, StoreService, CategoryService, PaginationService, NewsFeedService) {
    var clientDB = cDB;
    var login = LoginService;
    var account = AccountService;
    var profile = ProfileService;
    var account = AccountService;
    var booths = BoothService;
    var beacons = BeaconService;
    var stores = StoreService;
    var categories = CategoryService;
    var pagination = PaginationService;
    var newsFeeds = NewsFeedService;

    $scope.loginStatus = { status: false };
    $scope.loginStatus = login.getLoginStatus();
    $scope.cookieLogin = login.getCookieStatus();
    $scope.userAccount = profile.getUserAccount();
    $scope.userProfile = profile.getProfile();
    $scope.storeList = stores.getStores();
    $scope.categoryList = categories.getCategories();
    $scope.accountList = account.getAccount();
    $scope.boothList = booths.getBooths();
    $scope.beaconList = beacons.getBeacons();
    $scope.newsFeedList = newsFeeds.getNewsFeeds();
    console.log($scope);
    if (!$.cookie("mapUmeLoggedIn")) {
        $location.path('/');
    }
    else {
        var temp = account.getAccount();
        var cred = clientDB.getCredentials();
        //If the user is logged in but no account set in service then page has been refreshed
        //As a result new login for account + profile from server and stores + categories are set from local DB
        if (temp.account == null) {
            login.login(cred.username, cred.password);
            profile.setUserAccount(clientDB.getUserAccount());
            if (clientDB.getUserProfile() != null)
                profile.setProfile(clientDB.getUserProfile());
           
        }

    }


    $scope.$watch('loginStatus.status', function () {
        if ($scope.loginStatus.status == true || $scope.cookieLogin.status == true) {
            BroadcastService.subscribe();
            account.setAccount(clientDB.getCMSAccounts(clientDB.getCurrentProject(), false));
            if (clientDB.getCMSAccounts(clientDB.getCurrentProject(), false) == null)
                account.QueryAccount();
            beacons.setBeacons(clientDB.getCMSBeacons(clientDB.getCurrentProject(), false));
            if (clientDB.getCMSBeacons(clientDB.getCurrentProject(), false) == null)
                beacons.QueryBeacons();
            booths.setBooths(clientDB.getCMSBooths(clientDB.getCurrentProject(), false));
            if (clientDB.getCMSBooths(clientDB.getCurrentProject(), false) == null)
                booths.QueryBooths();

            stores.setStores(clientDB.getCMSStores(clientDB.getCurrentProject(), false));
            if (clientDB.getCMSStores(clientDB.getCurrentProject(), false) == null)
                stores.QueryStores();

            categories.setCategories(clientDB.getCMSStoreCategories(clientDB.getCurrentProject(), false));
            if (clientDB.getCMSStoreCategories(clientDB.getCurrentProject(), false) == null)
                categories.QueryProductCategories();

            newsFeeds.setNewsFeeds(clientDB.getCMSNewsFeed(clientDB.getCurrentProject(), false));
            if (clientDB.getCMSNewsFeed(clientDB.getCurrentProject(), false) == null)
                newsFeeds.QueryNewsFeeds();
        }
    });

    /*
    * Area for the CKEditor
    */
    $scope.editorOptions = {
        allowedContent: true,
        language: 'en',
        'skin': 'moono',
        'extraPlugins': "base64image",
        toolbarLocation: 'top',
        toolbar: 'full',
        toolbar_full: [
            {
                name: 'basicstyles',
                items: ['Bold', 'Italic', 'Strike', 'Underline']
            },
            { name: 'paragraph', items: ['BulletedList', 'NumberedList', 'Blockquote'] },
            { name: 'editing', items: ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'] },
            { name: 'links', items: ['Link', 'Unlink'] },
            { name: 'tools', items: ['SpellChecker', 'Maximize'] },
            { name: 'clipboard', items: ['Undo', 'Redo'] },
            { name: 'styles', items: ['Format', 'FontSize', 'TextColor', 'PasteText', 'PasteFromWord'] },
            { name: 'insert', items: ['base64image', 'Table', 'SpecialChar'] }, '/',
        ]
    };

    //Following is to show/hide sidebar
    $scope.showSidebar = true;

    //Function to log user out of application
    $scope.logout = function () {
        login.logout();
        $location.path('/');
    };

    //Used to switch the content display area chosen by the user ( Store, Category, etc...)
    $scope.displaySelection = "Default"
    $scope.changedDispaySelection = function (choice) {
        $scope.displaySelection = choice;
        $scope.setUpPagination(choice);
    };

    $scope.accountDisplay = "AccountCard";
    $scope.prevAccountDisplay = [];
    $scope.changeAccountDisplay = function (name) {
        if (name == "goBack") {

            $scope.accountDisplay = $scope.prevAccountDisplay[$scope.prevAccountDisplay.length - 1];
            $scope.prevAccountDisplay = $scope.prevAccountDisplay.slice(0, $scope.prevAccountDisplay.length - 1);
        }
        else {
            if (name != "AccountCard" && name != "AccountList")
                $scope.prevAccountDisplay.push($scope.accountDisplay);
            $scope.accountDisplay = name;
        }
    };

    $scope.setUpPagination = function (listType) {
        pagination.setDetails(listType);
    };

    $scope.boothDisplay = "BoothList";
    $scope.prevBoothDisplay = [];
    $scope.changeBoothDisplay = function (name) {
        if (name == "goBack") {

            $scope.boothDisplay = $scope.prevBoothDisplay[$scope.prevBoothDisplay.length - 1];
            $scope.prevBoothDisplay = $scope.prevBoothDisplay.slice(0, $scope.prevBoothDisplay.length - 1);
        }
        else {
            if (name != "BoothCard" && name != "BoothList")
                $scope.prevBoothDisplay.push($scope.boothDisplay);
            $scope.boothDisplay = name;
        }
    };

    $scope.beaconDisplay = "BeaconList";
    $scope.prevBeaconDisplay = [];
    $scope.changeBeaconDisplay = function (name) {
        if (name == "goBack") {

            $scope.beaconDisplay = $scope.prevBeaconDisplay[$scope.prevBeaconDisplay.length - 1];
            $scope.prevBeaconDisplay = $scope.prevBeaconDisplay.slice(0, $scope.prevBeaconDisplay.length - 1);
        }
        else {
            if (name != "BeaconCard" && name != "BeaconList")
                $scope.prevBeaconDisplay.push($scope.beaconDisplay);
            $scope.beaconDisplay = name;
        }
    };

    $scope.setUpPagination = function (listType) {
        pagination.setDetails(listType);
    };

    //Used to switch the category display - Store list or Single store category list
    $scope.categoryDisplay = "CategoryCard";
    $scope.prevCategoryDisplay = [];
    $scope.changeCategoryDisplay = function (name) {
        if (name == "goBack") {
            $scope.categoryDisplay = $scope.prevCategoryDisplay[$scope.prevCategoryDisplay.length - 1];
            $scope.prevCategoryDisplay = $scope.prevCategoryDisplay.slice(0, $scope.prevCategoryDisplay.length - 1);
        }
        else {
            if (name != "CategoryCard" && name != "CategoryList")
                $scope.prevCategoryDisplay.push($scope.categoryDisplay);
            $scope.categoryDisplay = name;
        }
    };

    $scope.dashboardDisplay = "DashboardCard";
    $scope.changeDashboardDisplay = function (name) {
        $scope.dashboardDisplay = name;
    };
    //Used to switch the news feed display - news feed list or Single news feed category list
    $scope.newsFeedDisplay = "NewsFeedCard";
    $scope.prevNewsFeedDisplay = [];
    $scope.changeNewsFeedDisplay = function (name) {
        if (name == "goBack") {
            $scope.newsFeedDisplay = $scope.prevNewsFeedDisplay[$scope.prevNewsFeedDisplay.length - 1];
            $scope.prevNewsFeedDisplay = $scope.prevNewsFeedDisplay.slice(0, $scope.prevNewsFeedDisplay.length - 1);
        }
        else {
            if (name != "NewsFeedCard" && name != "NewsFeedList")
                $scope.prevNewsFeedDisplay.push($scope.newsFeedDisplay);
            $scope.newsFeedDisplay = name;
        }
    };

    //Used to switch the store display - Store list or Single store category list
    $scope.storeDisplay = "StoreCard";
    $scope.prevStoreDisplay = [];
    $scope.changeStoreDisplay = function (name) {
        if (name == "goBack") {
            $scope.storeDisplay = $scope.prevStoreDisplay[$scope.prevStoreDisplay.length - 1];
            $scope.prevStoreDisplay = $scope.prevStoreDisplay.slice(0, $scope.prevStoreDisplay.length - 1);
        }
        else {
            if (name != "StoreCard" && name != "StoreList")
                $scope.prevStoreDisplay.push($scope.storeDisplay);
            $scope.storeDisplay = name;
        }
    };


    $scope.changeCurrentProject = function (project) {
        console.log(project);
        clientDB.addCurrentProject(project);
        profile.LastLoginProject();
    }




    $scope.isAdmin = true;
    $scope.projectsettings = {
        topNavBar: {
            card: true,
            categoryList: true,
            dashboard: true,
            account: true,
            zone: false,
            store: true,
            booth: true,
            beacon: true,
            newsFeed: true,
            kiosk: true,
            category: true
        },
        sideBar: {
            categoryList: true,
            dashboard: true,
            account: true,
            zone: false,
            store: true,
            booth: true,
            beacon: true,
            newsFeed: true,
            kiosk: true,
            category: true
        },
        dashboard: {
            zones: false,
            account: true,
            stores: true,
            booths: true,
            beacons: true,
            newsFeed: true,
            category: true
        },
        route: {
            default: true,
            directory: false,
            storeEditor: false,
            dashboard: true,
            zone: false,
            account: true,
            store: true,
            booth: true,
            beacon: true,
            newsFeed: true,
            category: true

        }
    }

}]);

